{"metadata":{"kaggle":{"accelerator":"none","dataSources":[{"sourceId":1367037,"sourceType":"datasetVersion","datasetId":796719}],"dockerImageVersionId":30732,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# Importing the Keras libraries and packages\n\nfrom keras.applications.vgg16 import VGG16\nfrom keras.applications.resnet50 import ResNet50\nfrom keras.applications.vgg19 import VGG19\nfrom keras.models import Model\nfrom keras.preprocessing import image\nfrom tensorflow.keras.layers import Input, Lambda ,Dense ,Flatten ,Dropout\nimport numpy as np\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport os\nimport cv2\n\ntrain_dir = \"/kaggle/input/american-sign-language-recognition/training_set\"\neval_dir = \"/kaggle/input/american-sign-language-recognition/test_set\"","metadata":{"_cell_guid":"79c7e3d0-c299-4dcb-8224-4455121ee9b0","_uuid":"d629ff2d2480ee46fbb7e2d37f6b5fab8052498a","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 2. Loading the data","metadata":{}},{"cell_type":"code","source":"#Helper function to load images from given directories\ndef load_images(directory):\n    images = []\n    labels = []\n    for idx, label in enumerate(uniq_labels):\n        for file in os.listdir(directory + \"/\" + label):\n            filepath = directory + \"/\" + label + \"/\" + file\n            image = cv2.resize(cv2.imread(filepath), (64, 64))\n            images.append(image)\n            labels.append(idx)\n    images = np.array(images)\n    labels = np.array(labels)\n    return(images, labels)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import keras\n\nuniq_labels = sorted(os.listdir(train_dir))\nimages, labels = load_images(directory = train_dir)\n\nif uniq_labels == sorted(os.listdir(eval_dir)):\n    X_eval, y_eval = load_images(directory = eval_dir)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(images, labels, test_size = 0.2, stratify = labels)\n\nn = len(uniq_labels)\ntrain_n = len(X_train)\ntest_n = len(X_test)\n\nprint(\"Total number of symbols: \", n)\nprint(\"Number of training images: \" , train_n)\nprint(\"Number of testing images: \", test_n)\n\neval_n = len(X_eval)\nprint(\"Number of evaluation images: \", eval_n)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"uniq_labels","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_train = keras.utils.to_categorical(y_train)\ny_test = keras.utils.to_categorical(y_test)\ny_eval = keras.utils.to_categorical(y_eval)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(y_train[0])\nprint(len(y_train[0]))","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train = X_train.astype('float32')/255.0\nX_test = X_test.astype('float32')/255.0\nX_eval = X_eval.astype('float32')/255.0","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Initialising vgg16 \nclassifier_vgg16 = VGG16(input_shape= (64,64,3),include_top=False,weights='imagenet')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Initialising vgg16 \nclassifier_resnet = ResNet50(input_shape= (64,64,3),include_top=False,weights='imagenet')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#don't train existing weights for vgg16\nfor layer in classifier_vgg16.layers:\n    layer.trainable = False\n\n#don't train existing weights for resnet50\nfor layer in classifier_resnet.layers:\n    layer.trainable = False","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"classifier1 = classifier_vgg16.output#head mode\nclassifier1 = Flatten()(classifier1)#adding layer of flatten\nclassifier1 = Dense(units=256, activation='relu')(classifier1)\nclassifier1 = Dropout(0.6)(classifier1)\nclassifier1 = Dense(units=40, activation='softmax')(classifier1)\n\nmodel = Model(inputs = classifier_vgg16.input , outputs = classifier1)\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"classifier2 = classifier_resnet.output#head mode\nclassifier2 = Flatten()(classifier2)#adding layer of flatten\nclassifier2 = Dropout(0.6)(classifier2)\nclassifier2 = Dense(units=40, activation='softmax')(classifier2)\n\nmodel2 = Model(inputs = classifier_resnet.input , outputs = classifier2)\nmodel2.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model.summary()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model2.summary()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#fit the model\n#it will take some time to train\nhistory = model.fit(X_train, y_train, epochs =5, batch_size = 64,validation_data=(X_test,y_test))","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#fit the model\n#it will take some time to train\nhistory2 = model2.fit(X_train, y_train, epochs =5, batch_size = 64,validation_data=(X_test,y_test))","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Saving the model of vgg16\nmodel.save('model_vgg16.h5')\n# Saving the model of resnet\nmodel2.save('model_resnet.h5')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Accuracy of **VGG16**","metadata":{}},{"cell_type":"code","source":"score = model.evaluate(x = X_test, y = y_test, verbose = 0)\nprint('Accuracy for test images:', round(score[1]*100, 3), '%')\nscore = model.evaluate(x = X_eval, y = y_eval, verbose = 0)\nprint('Accuracy for evaluation images:', round(score[1]*100, 3), '%')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Accuracy of **RESNET50**","metadata":{}},{"cell_type":"code","source":"score = model2.evaluate(x = X_test, y = y_test, verbose = 0)\nprint('Accuracy for test images:', round(score[1]*100, 3), '%')\nscore = model2.evaluate(x = X_eval, y = y_eval, verbose = 0)\nprint('Accuracy for evaluation images:', round(score[1]*100, 3), '%')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"VGG16 accuracy and loss plot","metadata":{}},{"cell_type":"code","source":"#vgg16\nimport matplotlib.pyplot as plt\n\n# summarize history for accuracy\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy of vgg16')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n\n# summarize history for loss\n\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"resnet50 accuracy and loss plot","metadata":{}},{"cell_type":"code","source":"#vgg16\nimport matplotlib.pyplot as plt\n\n# summarize history for accuracy\nplt.plot(history2.history['accuracy'])\nplt.plot(history2.history['val_accuracy'])\nplt.title('model accuracy of vgg16')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n\n# summarize history for loss\n\nplt.plot(history2.history['loss'])\nplt.plot(history2.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Helper function to plot confusion matrix\ndef plot_confusion_matrix(y, y_pred):\n    y = np.argmax(y, axis = 1)\n    y_pred = np.argmax(y_pred, axis = 1)\n    cm = confusion_matrix(y, y_pred)\n    plt.figure(figsize = (24, 20))\n    ax = plt.subplot()\n    plt.imshow(cm, interpolation = 'nearest', cmap = plt.cm.Purples)\n    plt.colorbar()\n    plt.title(\"Confusion Matrix\")\n    tick_marks = np.arange(len(uniq_labels))\n    plt.xticks(tick_marks, uniq_labels, rotation=45)\n    plt.yticks(tick_marks, uniq_labels)\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n    ax.title.set_fontsize(20)\n    ax.xaxis.label.set_fontsize(16)\n    ax.yaxis.label.set_fontsize(16)\n    limit = cm.max() / 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], 'd'), horizontalalignment = \"center\",color = \"white\" if cm[i, j] > limit else \"black\")\n    plt.show()\n\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\ny_test_pred = model.predict(X_test, batch_size = 64, verbose = 0)\nplot_confusion_matrix(y_test, y_test_pred)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_eval_pred = model.predict(X_eval, batch_size = 512,verbose = 0)\nplot_confusion_matrix(y_eval, y_eval_pred)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def plot_confusion_matrix(y, y_pred):\n    y = np.argmax(y, axis = 1)\n    y_pred = np.argmax(y_pred, axis = 1)\n    cm = confusion_matrix(y, y_pred)\n    plt.figure(figsize = (24, 20))\n    ax = plt.subplot()\n    plt.imshow(cm, interpolation = 'nearest', cmap = plt.cm.Purples)\n    plt.colorbar()\n    plt.title(\"Confusion Matrix\")\n    tick_marks = np.arange(len(uniq_labels))\n    plt.xticks(tick_marks, uniq_labels, rotation=45)\n    plt.yticks(tick_marks, uniq_labels)\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n    ax.title.set_fontsize(20)\n    ax.xaxis.label.set_fontsize(16)\n    ax.yaxis.label.set_fontsize(16)\n    limit = cm.max() / 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], 'd'), horizontalalignment = \"center\",color = \"white\" if cm[i, j] > limit else \"black\")\n    plt.show()\n\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\ny_test_pred = model2.predict(X_test, batch_size = 64, verbose = 0)\nplot_confusion_matrix(y_test, y_test_pred)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_eval_pred = model2.predict(X_eval, batch_size = 64, verbose = 0)\nplot_confusion_matrix(y_eval, y_eval_pred)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# for only one prediction\nimport numpy as np\nfrom keras.preprocessing import image\ntest_image = image.load_img('/kaggle/input/american-sign-language-recognition/test_set/best of luck/11.png',target_size=(64,64))\nplt.imshow(test_image)\ntest_image = image.img_to_array(test_image)\ntest_image = np.expand_dims(test_image, axis=0)\nresult = model.predict(test_image)\n\n\nif result[0][0] == 1:\n    prediction = '1'\nelif result[0][1] == 1:\n    prediction = '10'\nelif result[0][2] == 1:\n    prediction = '2'\nelif result[0][3] == 1:\n    prediction = '3'\nelif result[0][4] == 1:\n    prediction = '4'\nelif result[0][5] == 1:\n    prediction = '5'\nelif result[0][6] == 1:\n    prediction = '6'\nelif result[0][7] == 1:\n    prediction = '7'\nelif result[0][8] == 1:\n    prediction = '8'\nelif result[0][9] == 1:\n    prediction = '9'\nelif result[0][10] == 1:\n    prediction = 'A'\nelif result[0][11] == 1:\n    prediction = 'B'\nelif result[0][12] == 1:\n    prediction = 'C'\nelif result[0][13] == 1:\n    prediction = 'D'\nelif result[0][14] == 1:\n    prediction = 'E'\nelif result[0][15] == 1:\n    prediction = 'F'\nelif result[0][16] == 1:\n    prediction = 'G'\nelif result[0][17] == 1:\n    prediction = 'H'\nelif result[0][18] == 1:\n    prediction = 'I'\nelif result[0][19] == 1:\n    prediction = 'J'\nelif result[0][20] == 1:\n    prediction = 'K'\nelif result[0][21] == 1:\n    prediction = 'L'\nelif result[0][22] == 1:\n    prediction = 'M'\nelif result[0][23] == 1:\n    prediction = 'N'\nelif result[0][24] == 1:\n    prediction = 'O'\nelif result[0][25] == 1:\n    prediction = 'P'\nelif result[0][26] == 1:\n    prediction = 'Q'\nelif result[0][27] == 1:\n    prediction = 'R'\nelif result[0][28] == 1:\n    prediction = 'S'\nelif result[0][29] == 1:\n    prediction = 'T'\nelif result[0][30] == 1:\n    prediction = 'U'\nelif result[0][31] == 1:\n    prediction = 'V'\nelif result[0][32] == 1:\n    prediction = 'W'\nelif result[0][33] == 1:\n    prediction = 'X'\nelif result[0][34] == 1:\n    prediction = 'Y'\nelif result[0][35] == 1:\n    prediction = 'Z'\nelif result[0][36] == 1:\n    prediction = 'best of luck'\nelif result[0][37] == 1:\n    prediction = 'fuck you'\nelif result[0][38] == 1:\n    prediction = 'i love you'\nelse:\n    prediction = '  '\n    \nprint(prediction)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# for only one prediction\nimport numpy as np\nfrom keras.preprocessing import image\ntest_image = image.load_img('/kaggle/input/american-sign-language-recognition/test_set/space/10.png',target_size=(64,64))\nplt.imshow(test_image)\ntest_image = image.img_to_array(test_image)\ntest_image = np.expand_dims(test_image, axis=0)\nresult = model2.predict(test_image)\n\n\nif result[0][0] == 1:\n    prediction = '1'\nelif result[0][1] == 1:\n    prediction = '10'\nelif result[0][2] == 1:\n    prediction = '2'\nelif result[0][3] == 1:\n    prediction = '3'\nelif result[0][4] == 1:\n    prediction = '4'\nelif result[0][5] == 1:\n    prediction = '5'\nelif result[0][6] == 1:\n    prediction = '6'\nelif result[0][7] == 1:\n    prediction = '7'\nelif result[0][8] == 1:\n    prediction = '8'\nelif result[0][9] == 1:\n    prediction = '9'\nelif result[0][10] == 1:\n    prediction = 'A'\nelif result[0][11] == 1:\n    prediction = 'B'\nelif result[0][12] == 1:\n    prediction = 'C'\nelif result[0][13] == 1:\n    prediction = 'D'\nelif result[0][14] == 1:\n    prediction = 'E'\nelif result[0][15] == 1:\n    prediction = 'F'\nelif result[0][16] == 1:\n    prediction = 'G'\nelif result[0][17] == 1:\n    prediction = 'H'\nelif result[0][18] == 1:\n    prediction = 'I'\nelif result[0][19] == 1:\n    prediction = 'J'\nelif result[0][20] == 1:\n    prediction = 'K'\nelif result[0][21] == 1:\n    prediction = 'L'\nelif result[0][22] == 1:\n    prediction = 'M'\nelif result[0][23] == 1:\n    prediction = 'N'\nelif result[0][24] == 1:\n    prediction = 'O'\nelif result[0][25] == 1:\n    prediction = 'P'\nelif result[0][26] == 1:\n    prediction = 'Q'\nelif result[0][27] == 1:\n    prediction = 'R'\nelif result[0][28] == 1:\n    prediction = 'S'\nelif result[0][29] == 1:\n    prediction = 'T'\nelif result[0][30] == 1:\n    prediction = 'U'\nelif result[0][31] == 1:\n    prediction = 'V'\nelif result[0][32] == 1:\n    prediction = 'W'\nelif result[0][33] == 1:\n    prediction = 'X'\nelif result[0][34] == 1:\n    prediction = 'Y'\nelif result[0][35] == 1:\n    prediction = 'Z'\nelif result[0][36] == 1:\n    prediction = 'best of luck'\nelif result[0][37] == 1:\n    prediction = 'fuck you'\nelif result[0][38] == 1:\n    prediction = 'i love you'\nelse:\n    prediction = 'space'\n    \nprint(prediction)","metadata":{"trusted":true},"execution_count":null,"outputs":[]}]}