{"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"kaggle":{"accelerator":"none","dataSources":[],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"Region Growing based on given seed point and given threshold","metadata":{"id":"TOhjem-g_mj7"}},{"cell_type":"code","source":"from collections import deque\nimport cv2\nimport numpy as np\nimport matplotlib.pyplot as plt","metadata":{"id":"hbQ2wQWRqvnw"},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"image_path = \"/content/images-2.jpeg\"\nimage = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)","metadata":{"id":"lrgtt1A7FHWg"},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"def region_growing(image, seed_x, seed_y, similarity_threshold):\n    region = np.zeros_like(image)\n    region[seed_y, seed_x] = 255\n\n    queue = deque([(seed_x, seed_y)])\n\n    visited = set()  # Keep track of visited pixels\n\n    while queue:\n        x, y = queue.popleft()  # Use deque for efficient pop\n        visited.add((x, y))\n\n        for dx in [-1, 0, 1]:\n            for dy in [-1, 0, 1]:\n                nx, ny = x + dx, y + dy\n                if (nx, ny) not in visited and 0 <= nx < image.shape[1] and 0 <= ny < image.shape[0]:\n                    if abs(int(image[ny, nx]) - int(image[seed_y, seed_x])) <= similarity_threshold:\n                        region[ny, nx] = 255\n                        queue.append((nx, ny))\n                        visited.add((nx, ny))\n\n    return region","metadata":{"id":"QkEyVTHsFK21"},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"seed_x, seed_y = 2,2\nsimilarity_threshold = 10\nregion = 255-region_growing(image, seed_x, seed_y, similarity_threshold)\n","metadata":{"id":"0ag1gXW_FOY8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(37.4,66.4))\nplt.subplot(1, 2, 1)\nplt.imshow(image, cmap=\"gray\")\nplt.title(\"Original Image\")\nplt.axis(\"off\")\n\nplt.subplot(1, 2, 2)\nplt.imshow(region,cmap=\"gray\")\nplt.title(\"Segmented Region\")\nplt.axis(\"off\")\n\nplt.show()","metadata":{"id":"C5cvATawFT7o"},"execution_count":null,"outputs":[]}]}